package cbliteDesktop;

import com.couchbase.lite.*;

import java.io.File;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Random;

public class Main {

    private static final String DB_NAME = "wayship";
    /*      Credentials declared this way purely for expediency in this demo - use OAUTH in production code */
    private static final String DB_USER = "wayship";
    private static final String DB_PASS = "wayship";
//    private static final String SYNC_GATEWAY_URL = "ws://127.0.0.1:4984/db" + DB_NAME;
    private static final String SYNC_GATEWAY_URL = "ws://ec2-13-232-14-6.ap-south-1.compute.amazonaws.com:4984/wayship";
    private static final String DB_PATH = new File("").getAbsolutePath() + "/resources";
    static Database database;

    public static void main(String[] args) throws CouchbaseLiteException, InterruptedException, URISyntaxException {
        Random RANDOM = new Random();
        int randPtrLang = RANDOM.nextInt(5);
        int randPtrType = RANDOM.nextInt(5);
        int numRows = 0;

        Double randVn = RANDOM.nextDouble() + 1;

        List<String> listLangs = new ArrayList<String>(Arrays.asList("Java", "Swift", "C#.Net", "Objective-C", "C++", "Cobol"));
//        List<String> listTypes = new ArrayList<String>();
        List<String> listTypes = new ArrayList<String>(Arrays.asList("SDK", "API", "Framework", "Methodology", "Language", "IDE"));

        String Prop_Id = "id";
        String Prop_Language = "language";
        String Prop_Type = "type";
        String Prop_Version = "version";
        String searchStringType = "SDK";
        String dirPath = new File("").getAbsolutePath() + "/resources";

        // Initialize Couchbase Lite
        CouchbaseLite.init();

        // Get the database (and create it if it doesnâ€™t exist).
        DatabaseConfiguration config = new DatabaseConfiguration();

        config.setDirectory("/home/sudhir/");
        // config.setDirectory(context.getFilesDir().getAbsolutePath());

        config.setEncryptionKey(new EncryptionKey(DB_PASS));
        database = new Database(DB_NAME, config);

        // Create a new document (i.e. a record) in the database.
        MutableDocument mutableDoc = new MutableDocument()
                .setDouble(Prop_Version, randVn)
                .setString(Prop_Type, listTypes.get(randPtrType));

        // Save it to the database.
        database.save(mutableDoc);

        // Update a document.
        mutableDoc = database.getDocument(mutableDoc.getId()).toMutable();
        mutableDoc.setString(Prop_Language, listLangs.get(randPtrLang));
        database.save(mutableDoc);

        Document document = database.getDocument(mutableDoc.getId());
        // Log the document ID (generated by the database) and properties
        System.out.println("Document ID is :: " + document.getId());
        System.out.println("Learning " + document.getString(Prop_Language));

        // Create a query to fetch documents of type SDK.
        System.out.println("== Executing Query 1");
        Query query = QueryBuilder.select(SelectResult.all())
                .from(DataSource.database(database))
                .where(Expression.property(Prop_Type).equalTo(Expression.string(searchStringType)));
        ResultSet result = query.execute();
        System.out.println(String.format("Query returned %d rows of type %s", result.allResults().size(), searchStringType));

        // Create a query to fetch all documents.
        System.out.println("== Executing Query 2");
        Query queryAll = QueryBuilder.select(SelectResult.expression(Meta.id),
                SelectResult.property(Prop_Language),
                SelectResult.property(Prop_Version),
                SelectResult.property(Prop_Type))
                .from(DataSource.database(database));
        try {
            for (Result thisDoc : queryAll.execute()) {
                numRows++;
                System.out.println(String.format("%d ... Id: %s is learning: %s version: %.2f type is %s",
                        numRows,
                        thisDoc.getString(Prop_Id),
                        thisDoc.getString(Prop_Language),
                        thisDoc.getDouble(Prop_Version),
                        thisDoc.getString(Prop_Type)));
            }
        } catch (CouchbaseLiteException e) {
            e.printStackTrace();
        }
        System.out.println(String.format("Total rows returned by query = %d", numRows));

        Endpoint targetEndpoint = new URLEndpoint(new URI(SYNC_GATEWAY_URL));
        ReplicatorConfiguration replConfig = new ReplicatorConfiguration(database, targetEndpoint);
        replConfig.setReplicatorType(ReplicatorConfiguration.ReplicatorType.PUSH_AND_PULL);

        // Add authentication.
        replConfig.setAuthenticator(new BasicAuthenticator(DB_USER, DB_PASS));

        // Create replicator (be sure to hold a reference somewhere that will prevent the Replicator from being GCed)
        Replicator replicator = new Replicator(replConfig);

        // Listen to replicator change events.
        replicator.addChangeListener(change -> {
            if (change.getStatus().getError() != null) {
                System.err.println("Error code ::  " + change.getStatus().getError().getCode());
            }
        });
        Main.startReplicationLocal();
                

//        // Start replication.
//        replicator.start(true);
//
//        // Check status of replication and wait till it is completed
//        while (replicator.getStatus().getActivityLevel() != Replicator.ActivityLevel.STOPPED) {
//            Thread.sleep(1000);
//        }
//
//        System.out.println("Finish!");
//
//        System.exit(0);

    }

    static void startReplicationLocal() throws URISyntaxException, CouchbaseLiteException, InterruptedException {
//        Endpoint startpoint = new URLEndpoint(new URI("wss://localhost:8954"));
//        final ReplicatorConfiguration thisConfig
//                = new ReplicatorConfiguration(
//                        database,
//                        startpoint);
//
//        thisConfig.setAcceptOnlySelfSignedServerCertificate(true);
//
//        final BasicAuthenticator thisAuth
//                = new BasicAuthenticator(
//                        "wayship",
//                        "wayship");
//        thisConfig.setAuthenticator(thisAuth);
//
//        Replicator replicator = new Replicator(thisConfig);
//        replicator.start();

        // Initialize the listener config
        final URLEndpointListenerConfiguration thisConfig
                = new URLEndpointListenerConfiguration(database);

        thisConfig.setPort(55990);

        thisConfig.setNetworkInterface("0.0.0.0");

        thisConfig.setEnableDeltaSync(false);
        thisConfig.setDisableTls(true);
        // Configure server security

        // Use an Anonymous Self-Signed Cert
        thisConfig.setTlsIdentity(null);

        // Configure Client Security using an Authenticator
        // For example, Basic Authentication
        char[] charArray ={ 'w', 'a', 'y', 's', 'h', 'i', 'p' }; 
        thisConfig.setAuthenticator(new ListenerPasswordAuthenticator(
                (validUser, validPassword)
                -> "wayship".equals(validUser)
                && Arrays.equals(charArray, validPassword)));

        // Initialize the listener
        final URLEndpointListener thisListener
                = new URLEndpointListener(thisConfig);

        // Start the listener
        thisListener.start();
        int connectionCount;
        connectionCount = thisListener.getStatus().getConnectionCount();
        while(connectionCount > -1) {
            System.out.println("The total connections "+ connectionCount);
            Thread.sleep(1000);
        }
        System.out.println("Finish");
    }
}
